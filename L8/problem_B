def initmemory(maxn):
    memory = []
    for i in range(maxn):
        memory.append([0, i + 1, 0])
    return [memory, 0]


def newnode(memstruct):
    memory, firstfree = memstruct
    memstruct[1] = memory[firstfree][1]
    return firstfree


def createandfillnode(memstruct, key):
    index = newnode(memstruct)
    memstruct[0][index][0] = key
    memstruct[0][index][1] = -1
    memstruct[0][index][2] = -1
    return index


def add(memstruct, root, x):
    key = memstruct[0][root][0]
    if x < key:
        left = memstruct[0][root][1]
        if left == -1:
            memstruct[0][root][1] = createandfillnode(memstruct, x)
        else:
            add(memstruct, left, x)
    elif x > key:
        right = memstruct[0][root][2]
        if right == -1:
            memstruct[0][root][2] = createandfillnode(memstruct, x)
        else:
            add(memstruct, right, x)


def deep(memstruct, x, root):
    key = memstruct[0][root][0]
    if x == key:
        return 1
    elif x < key:
        left = memstruct[0][root][1]
        return 1 + deep(memstruct, x, left)
    elif x > key:
        right = memstruct[0][root][2]
        return 1 + deep(memstruct, x, right)


s = [int(x) for x in input().split()[:-1]]
tree = initmemory(len(set(s)))
root = createandfillnode(tree, s[0])
for i in s:
    add(tree, root, i)
for j in tree[0]:
    print(deep(tree, j[0], 0), end=' ')
